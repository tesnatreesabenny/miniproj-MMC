@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fish dot</title>
    @* <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script> *@
    <script src="~/js/practice1.js"></script>

    <style>
         body {
            margin: 0;
            background: #dddddd;
            /* display: flex; */
            justify-content: center;
            align-items: center;
         }

       

        /* #nextButton {
            background-color: rgb(27, 110,194);
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 6px;
            display: none;
        } */
        #nextButton {
            position: absolute;
            bottom: 18px; /* Distance from the bottom */
            right: 18px; /* Distance from the right */
           
           /*  font-size: 16px; */
            /* cursor: pointer; */
             display: none;   
           
        }

        .btn {
            background-color: rgb(27, 110,194);
            /* color: white; */
            padding: 10Px 20Px;
            border: none;
            border-radius: 6Px;
            cursor: pointer;

        }

        .arrow-icon {
            width: 26Px;
            height: 26Px;
        }
     
    </style>
</head>
<body>
        <div id="container">
        <button id="nextButton" class="btn" Onclick="goToNextPage()">Next
            <img src="~/img/arrow1.png" class="arrow-icon">
        </button>
       

        </div>
</body>
<script>
    let dots = [];
    let guideDots = [];
    let currentIndex = 0;
    let drawingCompleted = false;

    let lastPos = { x: 122, y: 240 };
    let currentPos = { x: 122, y: 240 };
    let dotSize = 12;

    const guidePoints = [
        { x: 162, y: 218 },
        { x: 122, y: 240 },
        { x: 266, y: 308 },
        { x: 310, y: 218 },
        { x: 300, y: 314 },
        { x: 458, y: 360 },
        { x: 430, y: 316 },
        { x: 458, y: 220 },
        { x: 448, y: 170 },
        { x: 500, y: 216 },
        { x: 472, y: 310 },
        { x: 614, y: 268 },
        { x: 698, y: 310 },
        { x: 732, y: 228 },
        { x: 710, y: 170 },
        { x: 610, y: 216 },
        { x: 554, y: 186 },
        { x: 614, y: 146 },
        { x: 472, y: 88 },
        { x: 404, y: 120 },
        { x: 208, y: 130 },
        { x: 110, y: 186 },
        { x: 162, y: 218 },
    ];

    class Dot {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
        connect(px, py) {
            stroke(90);
            line(this.x, this.y, px, py);
        }
        plot(fillColor, strokeColor) {
            fill(fillColor);
            stroke(strokeColor);
            strokeWeight(3);
            ellipse(this.x, this.y, dotSize);
        }
        plotText(txt) {
            fill(90);
            stroke(222);
            textSize(20);
            text(txt, this.x + 8, this.y + 10);
        }
        within(px, py) {
            let isWithin = false;
            let d = dist(px, py, this.x, this.y);
            isWithin = d < dotSize ? true : false;
            return isWithin;
        }
    }

    function setup() {
        createCanvas(900, 450);
        for (let i = 1; i < guidePoints.length; i++) {
            guideDots.push(new Dot(guidePoints[i].x, guidePoints[i].y));
        }
    }

    function draw() {
        background(222);
        textFont('Times');

        for (let i = 0; i < guideDots.length; i++) {
            guideDots[i].plot(222, 160);
            guideDots[i].plotText(i + 1);
        }

        for (let i = 0; i < dots.length; i++) {
            dots[i].plot(90, 90);
            if (i > 0) {
                dots[i].connect(dots[i - 1].x, dots[i - 1].y);
            }
        }

        if (currentIndex == 0) {
            fill(222, 55, 111);
            stroke(222);
            textSize(24);
            text("^ Start here!", guideDots[0].x - 5, guideDots[0].y + 30);
        }
        else if (!drawingCompleted) {
            stroke(222, 55, 111);
            strokeWeight(3);
            line(lastPos.x, lastPos.y, currentPos.x, currentPos.y);
        }
        else {
            fillVertex();
            fill(90);
            stroke(222);
            strokeWeight(5);
            ellipse(guideDots[length].x + 80, guideDots[length].y - 60, 30);
            textSize(24);
            text("Well Done!!", 40, 60);
            document.getElementById('nextButton').style.display = 'block';
        }
    }

    function fillVertex() {
        stroke(90);
        fill(222, 55, 111);
        beginShape();
        for (let i = 0; i < dots.length; i++) {
            vertex(dots[i].x, dots[i].y);
        }
        endShape(CLOSE);
    }

    function mousePressed() {
        currentPos.x = mouseX;
        currentPos.y = mouseY;
        if (!drawingCompleted &&
            guideDots[currentIndex].within(mouseX, mouseY)) {
            dots.push(new Dot(mouseX, mouseY));
            currentIndex++;
            lastPos.x = mouseX;
            lastPos.y = mouseY;
            if (currentIndex == guideDots.length) {
                drawingCompleted = true;
            }
        }
    }

    function mouseMoved() {
        currentPos.x = mouseX;
        currentPos.y = mouseY;
    }
    function goToNextPage() {
        window.location.href = '/Home/traininglevels';
    }
</script>
</html>